services:

    # PHP-FPM приложение
    app:
        user: "${UID:-1000}:${GID:-1000}"
        build:
            context: ./docker/php
        container_name: task-app
        working_dir: /var/www
        volumes:
            - ./:/var/www
        depends_on:
            mysql:
                condition: service_healthy
            redis:
                condition: service_started
        healthcheck:
            test: ["CMD", "php", "-r", "echo 'OK';"]
            interval: 30s
            timeout: 5s
            retries: 3

    # Nginx
    nginx:
        image: nginx:stable-alpine
        container_name: task-nginx
        ports:
            - "8080:80"
        volumes:
            - ./:/var/www:ro
            - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
        depends_on:
            - app
        restart: unless-stopped

    # MySQL база
    mysql:
        image: mysql:8.0
        container_name: task-mysql
        environment:
            MYSQL_ROOT_PASSWORD: root
            MYSQL_DATABASE: laravel
            MYSQL_USER: laravel
            MYSQL_PASSWORD: laravel
        volumes:
            - mysql_data:/var/lib/mysql
        healthcheck:
            test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
            interval: 10s
            timeout: 5s
            retries: 5
        restart: unless-stopped

    # Redis
    redis:
        image: redis:7-alpine
        container_name: task-redis

    # Laravel очередь
    queue:
        user: "${UID:-1000}:${GID:-1000}"
        build:
            context: ./docker/php
        container_name: task-queue
        working_dir: /var/www
        command: php artisan queue:work
        volumes:
            - ./:/var/www
        depends_on:
            app:
                condition: service_healthy
        restart: unless-stopped

    # Laravel планировщик
    scheduler:
        user: "${UID:-1000}:${GID:-1000}"
        build:
            context: ./docker/php
        container_name: task-scheduler
        working_dir: /var/www
        command: php artisan schedule:work
        volumes:
            - ./:/var/www
        depends_on:
            app:
                condition: service_healthy
        restart: unless-stopped

    # Redis GUI
    redis-commander:
        image: rediscommander/redis-commander:latest
        container_name: task-redis-ui
        environment:
            - REDIS_HOSTS=local:task-redis:6379
        ports:
            - "8081:8081"
        depends_on:
            - redis
        restart: unless-stopped

    # Adminer (MySQL UI)
    adminer:
        image: adminer
        container_name: task-adminer
        ports:
            - "8082:8080"
        restart: unless-stopped

volumes:
    mysql_data:
